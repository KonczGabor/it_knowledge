Mini adatbázis objektumokkal.
Nem tárol diff-eket.
Herlyette tömörít.
Kevsebb hálózati mûvelet. Azokat is tömörítve küldi.

Working Directoryban minddig az van amivel éppen dolgozunk. 

Staging area: Olyan információ, mi fog a következõ commitba belekerülni. Mi kerüljön bele a kommitba azt tárolja.

Repository a verziózott adatbázis. (.git) Object database. 

Checkout: Kiszedi a repositoryból a forrásfileokat amikkel akarunk dolgozni és beleteszi a working directory-ba.

Minden új file-t add-elni kell, különben untracked marad. Ekkor unmodified állapotba kerül.

git commit -m 'ide irhatod a message-et'

A lefordított classokat nem szoktuk hozzáadni a githez (gitignore).

git add . = minden ami nem volt tracked tracked-dé teszi.

gitk& háttérben fusson egy grafikus felület. git log is tud gráfos megjelenítést a konzolban valamilyne plusz kapcsolóval.

Beállítáok: Local, Global, System

Object database. Zlib-bel betömörítve. Ezek az objectek (ezek nem változnak):
BLOB maga a file-t
Tree: Folderek
Commit: Ki mikor mit hova kommitol
Tag

Referenciák (ezek változnak):
Head,
Branch
Tag



sha1 azonosító a file tartalmából generálódik. Ezért az object database-ben egyszer tároloódik le két külön file.

A kommit mindig egy tree-re mutat, benne van h ki volt a szerzõ meg az email, meg a message szöveget, meg a szülejét.

HEAD megmutatja hogy a working areánk hol van.

git cat-file -p: megnyit egy BLOB-ot

Mappa neve az elõs 2 betû a 40 hosszú hash-bõl, a maradék 38 pedig a blob-é.

A távoli, lecloneozott repó az origin/master branch (a távolban az csak sima master ).

Távoli branch-be nem lehet kommitolni.

Távoli branch-re is lehet checkoutolni, de akkor commit-ra fog mutatni és nem branch-re, de nem fog semmilyen címre mutatni.
Rá lehet állni egy branch-re akkor is ha az remote, kommitolni is lehet rá de akkor detached álloptba kerül, de mivel nem brach-re hanem commitra mutat a head nem fog semmilyen branch címkét tovább vinni.

git remote -v: részletes kiíratása a távoli branch-eknek.

fetch: azt jelenti h lehúzom a távoli változtatásokat.

Pusholni nincs mindig jogod, pull request az amikor valakit megkérek hogy helyettem pusholja föl.

Fetch + merge = pull. A fetch csak leszedi, de nem áll át rá.

Component guardian behúzhatja a pullrequestet. 
Pull request: álltalában két tévoli repo között forgalom. Az én saját távolimba feltettem a lokálomból és a harmadik helyen a guardian an én távoli lokálomból behúzza.

A branch egy 40 bájtos pointer ami egy adott commitra mutat. 

Master->develop->topic branch a szeparáció miatt.

A commit mindig az elõzõ commit-ra mutat. (Utána jövõre nem is mmutathatna, mert immutable)

git checkout -b Ujbranch  : ha nem létezetett akkor létrehozza és átáll rá

git commit -am 'nem kell megnyitni a txt-t mert ide irok helyette' : az összes tracked-et commitolja.

git mergetool: meghívja a merge eszközt.
merge után még commitolni is kell.

git branch -d kitorlendomergeltbrencs
git branch -D kitorlendonemmergeltbrencs

A rebase minden kommitot egyenként mergel azért jó mert nem lesz tele a logom mindenféle elágazásokkal.

Revertálás: ellenkommit

Pull requestnél csak mergelni lehet, rebaselni nem.

Masterbe nem kommitolunk csak belemergelünk a developer ágból

A git snapshotokat tárol nem diff-eket.

Új banch során csak egy 40 bájtos pointer készül.

A Masterben tagelünk.
A commit history egy meghatározott pontjára rárakunk egy címkét hogy késõbb azt majd el tudjuk érni.
Két típus: Lightweight: nem módosítható.
			Annotált: (Részletes:) szerzõ, leírás.

hook: megszorítások h pl töltsük ki a komment mezõt az issue track számával.

Hátránya: nem lehet részben checkoutolni, a teljeset leszedi. A klónozás is ezért lassú.
Lock-olást nem támogatja. 

git commit --ammend : A leguttóbbi (de nem feltétlenül a legutolsó) commitot megváltoztatja.

git revert HEAD: Csinál egy ellenkommitot ott ahol a HEAD áll.

git reset: Visszaállítja a HEAD et egy adott kommitra.
	soft: visszaállítja a megadott kommitra nem fog hozzányúlni a változtatásokhoz, azok megmaradnak a working areában. Plusz az index file ban(más néven stage area) nem állítja vissza.
	mixed: nem módosítja a staging areát. de reseteli az indexet is WTF?
	hard: kiüríti az indext és a working areából visszaállnak a módsítások amikor az adott idõpontban voltam.
	
checkout: visszaállítani egy filenak az állpotát visszaállítani arra ami az utolsó kommitban volt.
checkout . Minden file-t visszaállít.

-------------
Directly reassign a branch to a commit with the -f option. So something like:

git branch -f master HEAD~3

moves (by force) the master branch to three parents behind HEAD.
-------------






















