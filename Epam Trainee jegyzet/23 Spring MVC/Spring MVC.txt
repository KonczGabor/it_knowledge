Data binding: Paraméterek feldoglozása (pocesszálása), valamint az alaklamzás paraméterekkel töténő vezérléséről szól. 
	Data binding a folymat mely során a beérkező paramétereket odaajuk a form objektünknek, vagy másszóval beleszúrkáljuk a request tartalmát a form objektünkbe. 
		BindingResult objektum: ide kerül a hibás mappelés során létrejött error.
Springben mingi POJO-kkal tudunk dolgozni

<jpa: repositories base-package="com.epam.bookshop.**.repositories"/> Megmondja a SpringData számára h hol vannak a repository interfészeink h tudjon nekünk Dao implementációkat csinálni.

	* = akármilyen file 
	** = akármilyen folderben akármilyen file mármilyen mélységben
	

<mvc:resource location="/WEB-INF/assets/" mapping="/assets/**" />
	CSS mágia: a statikus resource-ok megjelenítése. (,intha egy kontroller lenne, ami átnavigál)
	
Spring MVC: Olyan MVC framework ami a serlet API-ra épül, arra való h minél egyszerűbben készítsünk webalkalmazásokat a segítségével.
	Request Driven.
	Spring Core 100%-osan elérhetők vele.
	Könnyen lehet összekötni más dolgokkal a piacon (pluggable)
	Layout engines: A képernyő transzparansségének felépítése 
		Header, footer ritkán változik, szinte csak a body változik. (Ilyen layout engine az Apahe-Tiles, SiteMesh)
	Template engines: Freemarker, Velocity (emailek generálása tipikusan)
	Servlet technikára érül. Implementálja a Front Controller Design Patternt -> DispatcherServlet az ami implementálja
		Front Controller egy servlet. Ez delegálja a kérést a Controllereknek, 
		amik visszaküldik egy model-lel, majd a FrontController  elküldi a View- templatenek, 
		aki a kész view-t a FrontController-nek visszaküldik, aki rendeli a response-t és abból eseik ki valami(Json, html, xml)
		a web.xml -> spring MVC-be kerül át (6-os dia nagyon fontos!)
	Servlet Engine-ben fut.
	
	Front Controller: 
		Entry pont az alkalmazáshoz.
		Feldolgozza a user input-ot.
		A beérkező input alapján generál egy modellt, ami majd adatokat ad a view-nak
		
	A controller osztály neve végződjön Controller-re.
	Tegyük rá a @Controller annotációt
	
	@RequestMapping("/")
	metódus szolgálja ki a requesteket. A ("/") -path ra jövő requesteket szolgáljuk ki. (Régen ezt a web.xml-ben tettük)
	visszatérési értéke "logikai view név-vel való visszatérés". Ez a neve egy nézetnek amit definiáltunk máshol.
	
	Handler metóudus: Válaszol a request-re
	
	@ModelAttribute("bookshopName") -olyan kvázi factory method ami visszad egy olyan értéket, amit bele kell tenni a requestContext-be (JSP context-be) //request.setAttribute("")
	Mindig a lefutnak a request mapping metódus előtt.
	Ezen metódusok egymáshoz való meghívási sorrendje nem fix.
	
	mvccontext.xml
		<context:component-scan base-package="com.epam.bookshop" />
			Honnan szívja fel azokat az osztályokat amiket autómatikusan létre kellene hozni.
			
		<mvc:annotation driven/> //Off: konfigurálás módjai: xml-lel, annotációkkal, programatically, Spring MVC-t is lehet bárhogy
		
		ViewResolver: classPath-resource.hoz navigáljon.
			property-kkel össze lehet állítani a view helyét és kiterjesztését.
		
	web.xml
		<servlet-class>org.springframework.web.servlet.Dispatcher</servlet-class>
		<init-param>
			<param-name>contectConfigLocation</param-name>
			<param-values>classpath:spring/mvc-context.xml<!param-values>
		</init-param>
		
		<servlet-mapping>
			<url-pattern>/</url-pattern>	//minden beérkező kérés navigáljon ide "/"
		</servlet-mapping>
		
	Request mapping: Egy beérkező http request mely controller mely handler metódusa fog lefutni.
		request mapping handler: egy tároló h mikor melyik Request mapping handler-t használja (különböző GET, PUT, POST, DELETE, ConsumableMediaType(jSon), .. metódusok esetén ).
			Narrowing requestMapping: Ugyanarra a path-ra különböző esetek kiszolgálása történhet meg.
				@RequestMapping(value="/", method:RequestMEthod.POST)
				Egyik metódus
				@RequestMapping(value="/", method:RequestMEthod.POST)
				Másik metódus

			paraméter alapú request narrowing: 
				@RequestMapping(value="/", params:="myParam")
			
			Egy controllernek lehetőleg egy request mapping metódusnak kellene lennie.

	A modell az a map, amit látni fog a jsp és ${}-ra l tud rá hivatkozni.


	Logikai view nevek: implicit (Convention over Configuration) találja ki a beérkező url alalpján, h melyik view-re kéne navigálni.
		expicit: pl.: xml view resolverben konkértan rá tudok mutatni, míg az internalViewResolver prefix-szel és suffix-szekkel operál
			Az első nem null-t adja vissza.
			
		ContentNegotiatingViewResolver: egy delegátor ami más viewResolvereknek delegálja a munkát. Pl.: extension alapján.
			A legoptimálisabba válasz utat adja vissza a feltételekre jeleníit meg

	
	Request processing lifecycle:
		Beérkezik egy request.
		dispatcherServlet csinál vele dolgokat.
		Feloldja a view-t.
		endereljük a nézetet a user számára.
		
	Mindenféle úton(lodabalancer. stb) eljut a kérés mondjuk egy TomCat-hez.
	Eldönti h melyik alkalmazáshoz kell mennie, ez a root context-ből derül ki (Egy TomCat-ben több alkalmazás is futhat).
		Elérkezett az alkalmazáshoz a request -> megnézi a TomCat h mi van a web.xml-ben.
			A web.xml-ben megadott mapping alapján eldönti h melyik servlet-re kell navigálni a vezérlést.
				Ha nincs ilyen(404) akkor a web.xml-ben definiált error, vagy a TomCat error-ja jön fel.
				Ha megtalálta akkor a DispatcherServlet a belépési pont a a SpringContext-be, a Spring világába. ő köt össze a SpringCore által nyújtott feature-ökkel.
				A DispatcherServlet ismer a viewresolver chaint, ennek adja át a handler metódus által visszadott értéket.
				Kirendereljük a requestor felé a request body-t vagyis a contentet.
					Ez a content megy vissza a TomCat felé és kiadja magából a request body-t.

				
	A JSP-ket a wb-inf folderbe szoktuk tenni, mert védett terület.		

	Controllerek használata során igyekezzünk @ModelAttribute metódusokat használni, és nem nyúlni közvetlelnül a:
		reqest-hez, a response-hoz, a session-hö, a modell-hez.
		Kerüljük h egy kontrollerben több handler metódus legyen.
		
	Ne lépj ki a SpringMvc-ből. Ne keverd a Servlet Api-val.
	

Többrétegű webalkalmazások:
	Szeretjük a rétegeket különbőző contextek mögé is elhelyezni
	
	Spring context hierarchiák:
		A szülőt ismeri gyerek, de a szülő nem ismeri a gyereket.
		A gyerek kontext ki tud venni(belelát) a szülő kontextjébe, fordítva ez nem igaz.
		
		Alapvetően 2 kontextet támogat a SpringMvc.
		
		Előny: 
			A rétegek elválasztása.
			Elzárni bean-eket egymástól.
			Újrafelhasználható lehet egy layer.
			
		Standardizáltság: A layerek egy API-n keresztül érhetőek el <- nem lehet akárhogyan használni, csak úgy ahogy megendegedm
		
		Karbatarthatóság: Önállóan lehet módosítani, kicserélni, lecserélni, verziózni, refaktorálni.
		
		Tesztelhetőség: önállóan lehet tesztelni.
		
		Könnyebben lehet új feature-öket bevezetni.
		
		Distributed development: Különböző csapatok, különböző modulokkal -a többit stubbolják/mockolják.
		
		Önálló releasek lehetnek layerenként.
		
Tipikus 3 rétegű alkalmazás:

		View (presentation réteg) az adatok olyan foráman való megjelenítése ami  afelhasználó számára releváns
		
		Service layer: üzleti logikámat megvalósítsa.	
		
		A legalján van egy Repository Layer (DAO réteg) (3rd party-t integrálja) és nem biztos hogy azok az adatok olyan formátumban vannak, ahogy azt szerertném.
		
		
Best practices:
	Business domain mentén modularizálni az alkalmazást.
		Először vertikális, aztán horizontális bontás.
		
	A Layerek között transzformálj!
			
	Egy page-egy model	

	Ne nyúlkáljunk a request-be, response-ba, stb..
	
	JSP-n csak prezentációs logika legyen
		
<c:url> Kiegészíti a context root-tal.		
				
				
low lvl approach (manuális konverzió) (requestből szedegettük ki a paramétereket és egyesével alakítottuk át) helyett lehetőség nyílik a
@RequestMapping használatával a kényelmesebb String -> megfelelő attr. type mapping-re.			
	Ha sok paraméter érkezik akkor használjunk inkább form objectet (régi nevén command obj <- ütközik a command pattern névkonvencióval)
				
Nehéz rész: Spring MVC - Data binding - Introduction				
	poroperty editorokat kell regisztrálni h speciális esetekbena a mappelés egyértelmű legyen: pl.: dátumformátumok.	//Oldschool way
	
	
TagLibrary (spring-form.tld)
	felokosított form: A maven behúzza a sping tag library-t és így egy csomó extra feature-t kapunk.
	jsp oldalra:
		<%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
		
	<form: form>
	</form: form>
	
	Two way databinding
	A spring látja a form objectet.
	Minden form input és a modell össze van kötve egyértelműen.
	Nem kell kézzel összehuzaloznunk a form fieldeket a modell objektumainkkal.
	
Redirect-After-Post pattern:
	Megjelenítettük  formot, elposztoltuk a formot és arre redirect-elünk, hogy újra megjelenítsük.
	Így nem kell két handler ugyanarra a controllerre. 
	FlashAttribútumokban tárolódnak a redirect-en keresztül az értékek. A session-ből átpakolja a modellbe. Ez egy autómatizmus. Ki is takarít maga után.
	Segít megakadályozni a dupla submit-ot, ha véletlen kétszer kattintunk. 
	
Advanced Data binding:
	PropertyEditor -> Converter SPI (nem csak MVC-ben: View és DAO réteg között)
	Bármilyen objektumot bármivé konvertálni.
	
				
				
				
				
				
				
				
				
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				







































































































































			