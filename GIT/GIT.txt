https://learngitbranching.js.org/
	: type "undo" or "reset" to fix mistakes, nem kell újrahívni az oldalt.
	
https://www.bogotobogo.com/DevOps/SCM/Git/Git_GitHub_Fast-Forward_Merge.php
	Sok hasznos tutorial a végén
	
https://ndpsoftware.com/git-cheatsheet.html#loc=stash;	
	
http://gitimmersion.com/

https://git-scm.com/book/en/v2
	
.gitconfig locations (Minél általános érvényűbb, annál gyengébb):
	-System
		/etc/.gitconfig
		
	-Global
		~/.gitconfig
		username/.gitconfig
	-Local
		adott-repo/.git/config
	
Azert erdemesebb CLI-t használni:
	Mert néhány GUI nem implementálja a teljes funkció készletet,
	Mert más CLI toolokat is ha használunk akkor gyorsítjuk a munkát,
	Mert neten több segítséget kaphatunk az egéyrtelmú parancsok miatt.
	Az elosztott szemlélet nem csak a felhasználónkénti biztonsági másolatokat nyújtja, hanem a lehetőséget h offine is tudjunk dolgozni.
	Mivel nincs Igazi-Egy központi szerver, egy másik fejlesztőhöz is csatlakozhatunk és tőle, közvetlenül is el tudjuk kérni a változtatásokat. A Github/Lab csak egy általánosan elfogadott standard, amit hivatalosnak tekintünk.

Verzió: az összes file adott állapota.	

.git dir:
	hooks: kilens oldali hookok (pl:ellenőrizze commit előtt h ki van-e töltve a commit message issue azonosítóval [lehet ilyet szerver oldalon is {pl pull-ra}]).
	info: globálisan ignorált dolgok: olyan forráskódok amiket nem akarunk betenni a repositoryba, hasonlóan mint a .gitignore file-ban.
	logs: vissza lehet nézni h mi történt a repositoryban, milyen parancsok lettek lefuttatva, adott branch-re lebontva akár. 
		A HEAD file a közös history gyűjtőhelye: első oszlop: eredeti commit, második: az új commit, a többi egyértelmű.
	objects: ebben van az object database, a loose objectek, a packek
	refs:
		heads: lokális branchek
		tags
		remotes: távoli repók és azok brancheik			
	HEAD: a working directorynk éppen hova mutat. A file tartalma a refs/ mappa valamely eleme amennyiben nem vagyunk Detached állapotban. Ilyenkor egy 40 hosszú hash lesz a tarrtalma, a commit azonosítója, amire ki vagy checkoutolva.
	config: projekt specifikus beállítások, ez a legspecifikusabb, a lokál config (alapból 3 van: lokál, global, system)
		remotes
	index: staging area, az ami a következő committal be fog menni.
	
	
	
Timeline:
	Alapkoncepciók:
		A commitok immutable-k.
		A timelineban nem látszódnak csak bizonyos commitok.
		A branch csak egy pointer ami egy adott commitra mutat.
		A HEAD csak egy pointer ami egy adott commitra mutat (könnyen léptethető az öröklődési lánc mentén [ancestry pointers]).
		A különbség h a branch-ek egy ág utolsó commitjára mutatnak rendeltetésszerűen és autómatikusan átíródnak ha az ágon új commit jön létre, aktualizálván magukat.
		Ha kicheckoutolunk (átállítjuk a HEAD-et egy nem timeline végi commitra-ra) akkor detached állapotba kerülünk.
		Nyugodtan commitolhatunk, akár egymás után detached állapotban, csak arra kell vigyázni h mielőtt kicheckoutolnánk egy másik branch-re, a commitjainkat vezessük rá egy újonnan létrehozottra, különben később nehezen fogjuk csak megtalálni. (console prompt jelzi hova mutattott a HEAD)
		A timeline nem más mint a branchektől indulva, származási láncon visszafelé haladva felfűzhető commitok sora. 
		Ez nem zárja ki azt h egy commitnak több őse is legyen(merge commit, több branch egyidejű mergelése), de azt kizárja h a default timeline-ra a detached állapotban született, és branch-csel le nem zárt commit láncok megjelenítésre kerüljenek.
GIT:
	Eredetileg Linux Kernel projektek verziózására hozta létre Linus Torvalds.
	Decentralizált/elosztott verzió kezelő rendszer. //Mégis a gyakorlatban egy centrál repót használunk általában.
	Az összes file összes különböző verziója megtalálható az összes gépen.
	
	Csak egy pár parancshoz szükséges net kapcsolat, nagyon sok minden működik lokálban.	
	Nem diffeket tárol, azaz nem csak az eredetihez képest az azóta történt módosításokat(delta), hanem a megváltozott fileok teljes állapotáról készít egy snapshotot.
		Nyílván amihez már régóta nem nyúltunk azt nem fogjuk minden egyes commit(snapshot) során eltárolni, így valahogy ezt meg kellet oldani (kvázi tömörítéssel.).
	Nem lináris fejlesztés: 
		lehet branch-elni, különböző részein dolgozni a kódnak, amik majd időben lejet h csak később kerülnek élesítésre.
	
Repository:
		A verzió kezelés alatt álló fileok(és mappák) illetve azok verzióinak gyűjteménye.
		A struktúra gyökerében található a .git folder
		A git adatbázisa(object data base) + meaadatok.
		
Working Directory:
		A verzió kezelés alatt álló gyökér mappa (a .git folder közvetlen itt található).
		Ebben a mappában minidig az van amivel éppen aktuálisan dolgozunk, ebből teszünk át a stage-en keresztül a local repóba, és ide szedünk ki(checkout) verziókat (frissítjuk a Working Directoryban lévő filokat) a local repóbol.	

stage: /index: Az a vágólap, mely azon fileokat tartalmazza, melyek változásait szeretnénk a következő commitunkban megörökíteni.
	Leszedni vmit a stage-ről (Maga a fileokon végzett módosítások meg maradnak, csak úgy döntöttünk h már nem akarjuk őket betenni a commitba. //Ezzel szemben a git checkout . el dodbja a változásokat):
		Untrack a file or folder:
				git rm --cached :path_to_unstage
		git reset [file]
		git reset: Removes all files from the Git staging area but keeps all changes
		
commit:
	Immutable object, azaz soha nem fog módulni ha egyszer a "Hármas" a "Kettes" után következett, akkor az őse neki mindig a "Kettes" lesz.
	Egy pillanatfelvétel/snapshot a verzió kezelés alatt álló, working directory-nkban lévő megváltozott filejainkról (ha új fileokat hozunk létre az is egy módosulás).
	Az elkészült commit bekerül a local repóba, nem töltődik fel autómatikusan a remote-ba.
	
	A git fileokat kezel, nem foldereket. Ha mappa szerkezet változásokat szeretnénk megörökíteni akkor hozzunk létre az új mappákban üres dummy fielokat.
	
A branch csak az idővonal neve, amire fel vannak fűzve a commitok. 
	A branch törlése csak a labelt törli.
		
GitHub:
	Git repository hosting service.
	Unlimited frre repo if public is it.
	+szolgáltatások:
		IssueTracking
		Web Pages		
		
Install:
	Recommended:
		Checkout as-is, commit Unix-style linde endings

Create new SSH public_key:
		$ ssh-keygen -t rsa	
	
Show own config file:
		git config --global -e
	
$ git config --global user.name "John Doe"
$ git config --global user.email "johndoe@example.com"
$ git config --global core.editor "notepad++ -multiInst -nosession"

Checking Your Settings:
	$ git config --list
	git config -l

P4Merge for Windows (perforce.com):
		Visual Compare and Merge tool
		A Command Line Merge idegesítő
		During installation deselect all others but Visual Merge Tool
		git config --global diff.tool p4merge
		git config --global diff.tool p4merge.path "C:/Program Files/Perforce/p4merge.exe"
		git config --global diff.tool.prompt false
		git config --global merge.tool p4merge
		git config --global merge.tool p4merge.path "C:/Program Files/Perforce/p4merge.exe"
		git config --global merge.tool.prompt false
		
ssh-agent sh -c 'ssh-add ~/AsusWin7_private; 

Merge conflict:
	Mikor ugyan annak a filenak ugyanazon sorában történt módosítás a két összeolvasztandó branch commitjaiban, akkor nekünk kell beavatkozni manuálisan.
	Conflict esetén merging állapotba kerül a Head, amit jelez is egy |-pal elválasztva, pl.: (master|MERGING)
	Ilyenkor az Auto conflict resolving nem volt sikeres és a filebe mindkét lehetőséget beleírja, elválasztva
	<<<<<<<HEAD  --Utolsó commitra mutat
	======= //Ez szeparálja el a két lehetséges kimenetelt
	>>>>>>> A másik branch ahonnan mergelni szeretnénk.
		//Ha manuálisan akarjuk reseolválni akkor töröljük ki az összes markert és csak a kívánt módosítást hagyjuk bent.
	Ezek után ne felejtsük feltölteni a kész commitot.		
	
Working Directory: contains all the files and folders for your application (Nem minden áll verziókezelés alatt, de a git attól még figyeli őket, legfeljebb ignorálja. Ennek az állandó figyelés eredménye h észre tudja venni az újonnan született fileokat is)
Staging Area: used to prepare for the next commit. Ezen keresztül visszük át a Working Directorynakban történt módosulásokat commitok formájában a Repositoryba
Repository(.git folder): contains all the committed or saved changes to the Git repository. Anything here is a part of Git's history
Remote repository: Ez valójában csak egy sima repó a maga 3 belső állapotával, általában ez a centrál repó 


git life cycle:
	Két fő állapotot különböztetünk meg:
		Az adott file a working are-ában verzió kezelés alatt áll, vagy nem.
		Ha létrehozunk egyet akkor még autómatikusan nem kerül alá, ezért hozzá kell adni a git add -dal, így fog bekerülni tracked állapotba.
			Ha ki szeretnénk vonni valamit a verzió kezelés alól azt tegyük a .gitignore file-ba.
			
	Unmodified/Modified
	Staged
	Unmodified	


help:
	$ git help config


config:
	/.git/config
	General settings:
	 Itt vannak bekonfigurálva a remote is.
	 
add:
	git add new_fiel : trackertté tesz az adott filet("." -okat),
	Vagy hozzáadja az adott filet("." -okat)	
	
Initializing a Repository in an Existing Directory:
	$ git init [folder]
	Vagy ha már a folder kész van akkor álljunk bele és:
		$ git init .

Cloning an Existing Repository:
	$ git clone https://github.com/libgit2/libgit2

Checking the Status of Your Files:
	$ git status

$ git status -s:
	New files that aren’t tracked have a ?? next to them, new files that have been added to the staging area have an A, modified files have an M and so on. There are two columns to the output - the left hand column indicates that the file is staged and the right hand column indicates that it’s modified.

Add a specific file to the Git staging area of your repository.
	git add .
	git add [file]
	git add file1 file2
	git add *.html

	git add -u : a merge conflict során újra hozzá kell adni az érintett fileokat, így az összeset egy mozdulattal meg lehet tenni.
	Add all new/modified files inside the current directory to the staging area of your repository.

	
Commit everything has been changed	
	git commit -a
	Mi a különbség a -a és a . közt?




remove untracked files	
	git clean -df
	

Megszabadulunk egy file lokális változáisaitól és visszaállunk annak utolsó commitolt változatára:
	git checkout [file]
	git checkout .
		Eldobunk minden file össze változását és visszaállunk az utolsó commitbeli állapotukra.

git revert:
	Megadunk neki egy commitot és csinál az ellen egy ellencommitot pl.:
		Ha csinált a commitom egy olyat h beszúrt egy új sort, akkor az ellen commitban az kitörlődik.
		git revert HEAD: ha azt szeretnénk ellen commitálni amin állunk, akkor 
		
	Provides a way to safely remove a previous commit. Git will
	automatically remove the changes, and then create a new
	commit. This way you still have a history of the change being
	removed.


git help log 

log:
	Megmutatja a branch commit historyját (A legaktuálisabb van felül), gyakorlatilag kiírja a .git/logs/refs/heads/branch_name tartalmát
	q-val lépünk ki
	git log --oneline
		Egysorosított kiíratás
	git log --oneline --graph --decorate --all
		Színesít, minden branchre
	
	git log --author="Kevin"

	git log --grep="init"
	
	git log --graph
	
git show
	Csak az utolsó commitot mutat és a diff-t ami tartalmazza a változásokat.
	q-val lépünk ki
	
git ls-files	
		Megmutatja h mely fileok állnak verziókezelés alatt

//New branch creates from the particular branch where from it has been created. 

git branch [branch_name] 
	Create a new branch (copy of the code) to use to
	develop a new feature or fix a bug.


git branch
	Lists all of the available branches
	The * character indicates the branch we currently have checked out.
	 branch -a: show all branches


git checkout [branch_name] 
	Checks out an existing Git branch. This simply
	switches your code to a different Git branch.


git checkout -b [branch_name] 
	Creates a new Git branch and checks it out. This is
	a shortcut so you do not have to create the branch
	and check it out using two steps.



git merge [branch_name] 
Merge [branch_name] into your currently checked out Git branch.
The first step is to checkout your master branch using git checkout master, after that you can merge in your my_new_feature branch into your master branch by running git merge my_new_feature.
Ahol állok abba merge-öli be azt amit megadok neki.

git merge feature master
A feature-t bemásolja a master-be.

git branch --merged

git branch --no-merge

git branch -d branchName
	Delete branch
	Maga a commitok NEM törlődnek, csak a timeline labelje.
	
git branch -D branchName
	Forced Delete branch

git mergetool 
	Opens up an external Diff viewer or merge tool for
	merging conflicts.

git  add [remote-name] [remote-url]
	Adds a remote repository called [remote-name] located at [remote-url]. We can now push and pull from this repository (assuming we have permission).


git push -u origin master 
Push our master Git branch to the remote called origin.
$ git commit --allow-empty -m "Trigger notification"

git remote
	Lists the available remotes for your current Git
	project.

git remote set-url origin git@github.com:<Username>/<Project>.git


git remote -v 
	Provides more information about your Git remotes,
	such as the location and what operations can be
	performed.

git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git


git remote rm [remote-name]
Remove a Git remote from your current Git project.


git clone [git-url] [folder-name] 
Clone a Git repository at [git-url] and place it in a
new directory called [folder-name]


Git branch commands’ various options. -a shows all local and remote branches, while -r shows only remote branches.


git remote and git ls-remote

$ git remote show origin

'git branch -r' only shows unupdate version of remote, git ls-remote will query the remote, thus will list the current version.
If you git fetch, then 'git branch -r' will get the updated list at remote.

diff:
	Két commitot hasonlít össze, nem kell h szomszédosak legyenek, alapból az utolsóhoz hasonlít
		git diff randomCommitNumber HEAD 
		$ git diff HEAD^1
	

	git diff --staged
	The last changes on the stage

git difftool
	Ugyanezen^ logika mentén csak meghívja a bekonfigurélt difftolt (pl.: p4merge) 


branch:
	Egymástól elkülöníteni való fejlesztések timeline-jára mutató 40 bytos pointer. Egy adott commitra mutat.
	A legfontosabb h megértsük h gyakorlatilag két dolgot értünk alatta!:
		Az egyik a pointer, ami egy adott commitra mutat,
		A másik a line, ami az a füzér ami az adott utolsó commit és a gyökér között "feszül".
	Egy commit több branchhez is tartozhat.		
		
	.git/refs
	
	műveletek:
		git branch
		git branch --merged: azok a branchek amik már be lettek mergelve
		git branch --no-merged: azok a branchek amik még nem lettek mergelve		
		git checkout
		git merge
		git branch -d <branch_name>: adott branch törlése //Csak akkor töröl ha már a branch be lett húzva
		git branch -D <branch_name>: adott branch törlése //Abban az esetben is kitörli ha még nem lett bemergelve.
		git branch -r : távoli branchek kiíratása.
		git branch -m <branch_name>: átnevezi azt amelyiken állunk.
		git show-branch: grafikus kiíratás
		
	branch management:
		Long running branches:
			master: ebből készül a release
			develop: stabil, tesztelhető főverzió
		Short-lived	branches:
			topic: egy adott feature, vagy bugfix
		Áttolni tolni egy branchet (az adott commithoz képest hátrébb toljuk a mostani címkét/vagy rámutatunk egy commitra, branchre):
			git branch -f branch_name HEAD~3/hash/branch_name
		
clone:
	A távoli repositoryt letölt a gépüankre.

push:
	Így tudunk feltölteni a local repónkból a távoli repónkba. Working are-ból közvetlenül nem lehet. 
	Nem minden távoli repóba lehet pusholni, lehet h csak fetch-cselni szabad a jogok alapján.
	git push <name_of_remote_repo> <origin_branch>  git push origin myFeatureBranch
	git push <name_of_remote_repo> <origin_branch>:<destination_branch> 
	Delete remote branch:
		git push origin : destination_branch //Itt nem adtunk meg lokális branchet h mit szeretnénk hova pusholni, tehát a semmit töltjük fel valahová, ami törlést jelent 
	
	
merge:
	Egy elágazás(oka)t tudunk visszavetni egy másik branch-be.
	Egy olyan speciális commit fog létrejönni aminek legalább két szülője van.
	git merge masik_branch_name	: ahol állunk, abba mergeli beele azt amit megadunk. Így "húzunk be" ebben az esetben.
	git merge az_igenyelt_branch_neve ahova_branch_neve : from -> into
	
	Multiple merge(2+ szülő):
	       C---D  =>b1
		  /    
		 /  E---F  =>b2
		 | /   
	  A--B =======> master
		 | \
		 \  G---H  =>b3
		  \ 
		   I---J   =>b4
		git checkout master
		git merge b1 b2 b3 b4
	
	Merge típusok:
		Fast Forward:
			Legegyszerűbb eset: A parent branchen nem történt munka és mi csak ráolvasszuk a feature-ünket.
			Ebben az esetben nem keletkezik merge commit, kivéve ha használtuk a "--no-ff" paramétert is, azzal ki tudjuk eszközölni h fast-forward esetén is keletkezzen merge commit.
				git merge --no-ff amit_be_szeretnenk_mergelni
		
		Automatic:
			Nincs konfliktus a parent branch-csel, a git aoutómatikusan meg tudja oldani. Ilyenkor merge commit jön létre.
			
		Manual:
			Az autómatikus merge nem lehetséges, merge commit keletkezik a feloldás végén.

mergetool:
	Conflict esetén elég csak kiadni a:
		git mergetool 
			Atómatikusan meghívódik a defult mergetool(P4Merge a javasolt)
			A "local" ilyenkor amibe, a "remot" az a branch amit be akarunk húzni
			Ha nem áll fel conflict akkor ezt dobja: No files need merging
			
			fel is kell ám commitolni a változtatásunkat.

			
merge vs rebase
	Merge:
		Előny:
			Nyomonkövethetőség
		Hátrány:
			A rengeteg merge commit hatására vasúti rendezőpályaudvar lesz a history
			
	Rebase:
		Előny:
			A kód history nem ágazik szerteszéllyel és olvasható.
			Egyetlen commitot módosítani könnyebb (revert),//? mintha egy olyan commitot szeretnénk eldobni ami egy merge commit.
		Hátrány:	
			Nem egyértelmű a kontextus //?
			Nem működik igazán jól a pull requestekkel
			Mivel újraírja a történelmet ezért force pusholni kell a remote branchekre.
			Újrírja a "történelmet", mert kirántom mások alól azt a branchet emin dolgoztak, ezt csak force-szal lehet, ami meg gyakran le van tiltva.
	
	Aranyszabály: Soha ne rebaselj olyan commitot, amit már feltoltál a public repóba. 	
		Pl.: Kétszer fog bekerülni egy commit a history-ba, egyszer az eredeti, egyszer annak másolata.
			
			Hogy lehetséges ez?
				Adott a remote-on:
					1
					| \
					2 3
					| /
					4 (merge commit)
					
				Ugyanez nálam lokálban szintén + 5:	
					1
					| \
					2 3
					| /
					4 (merge commit)
					|
					5
					
				Közben más úgydönt hogy visszavonja a merge commitot és helyette rebasel egy force push-sal:
					1
					| 
					2 
					| 
					3' (Az eredeti 3-as másolata) 
					
				Én ezek után fetch-cselek (lehozom az összes commitot):	
					1
					| \
					2 3
				  /	| /
				 3' 4 (merge commit) 
					|
					5 (itt áll a masterem), nem fog menni a pusholás! 
				Rebaselnem, vagy mergelnem kell. Merge esetén:
					1
					| \
					2 3
				  /	| /
				 3' 4 (merge commit) 
				 |	|
				 |	5 
				 | /
				 6	(ezt már fel fogom tudni pusholni)
				 
				Így az a baj h kétszer szerepel a 3-as commit, egyszer eredetiben, egyszer annak másolata:
						Ugyanaz commitolta, ugyanolyan kommentel, ugyanakkor.
						Ezért nem javasolt h megváltoztatom azt ami szerverre már egyszer fel lett pusholva.		
					
					
fetch:
	Az összes file összes verziója lejön az én local repómba remote-ból, de természetesen nem integrálódik be a working directoryba, ahhoz merge kell vagyrebase.
	Oda töltődik le ahol az "origin/master" címke állt. Azóta köbe lehet h a mi "masterünk" elmászott. Hogy bekerüljön a lokális repómba vagy mergelnem, vagy rebaselnem kell.
	Ha kihagyjuk a fetch utasítást és egyből a pullal kezdünk akkor valójában nem hagyjuk ki a fetch-cset, hiszen working directoryba csak a local repón keresztül kerülhet be bármi,
	tehát "titokban" megfut egy fetch és az után egy merge-amivel a frissen letöltött commitot össze olvassza azzal ahol állunk, de ez merge conflictot okozhat.
	Ha nem történt azóta változtatás nállam akkor simán át tudok állni az új commitra.
	A fetch "teljesen ártalmatlan", mert nem manipulál/töröl semmit. (fetch is a Pull without a Merge)
	Handy if you want to compare your code with others.
	 
pull:
	Egy fetch, majd egy merge utasítás összevonása.
	Updateli a HEAD-et azaz amely branch-re a HEAD mutat, abba integráljuk a remote leagktuálisabb állapotát.
	Kialakulhat így a merge conflict, mert lehet h mi is ugyan azon sorokat módosítottuk, ugyanazon fileokban, ugyanazon branchen.
	Célszerű tehát hogy pull előtt tegyük clean-né a working directory-nkat: commiteljünk, vagy stash-eljünk.	
		
	

checkout:
	Ezzel a paranccsal tudunk ráálni egy adott commitra, vagy eldobni változtatásokat.
	checkout -b newBranch and cheheck it out
	Ha nem olyan commiton állunk, amelyre egy branch is mutat, akkor Deatached állapotba kerülünk.
		Ilyenkor minden további nélkül dolgozhatunk, commitokat gyárthatunk egymás után sorban és mindiig a legutolsóra fog mutatni a Headünk.
		Ilyenkor minden további nélkül dolgozhatunk, commitokat gyárthatunk egymás után sorban és mindiig a legutolsóra fog mutatni a Headünk.
		Mielőtt lelépnénk erről a commitról egy másikra(checkout), célszerű láthatóvá tenni a munkánkat a history line-ban, ugyanis abban csak azok a commitok látszanak, melyek felfűzhetőek egy branch és a gyökér elem között feszülő szálra.
		Szóval a checkot -b new_beanch az eddigi detached állaputunkból kivezet úgy h a magunk mögött gyártott commitok felfűzűdnek a new_branch -re így könnyebben vissza fogunk tudni majd hozzájuk találni.	
	
	git checkout file_name : visszaállítjuk a file állapotát arra, ami az utolsó commitban volt.
	git checkout . 		   : minden filet visszaállít arra az állapotra ami ahhoz a commithoz tartozik amin állunk.
	
nem lokális műveletek:
		push,
		pull,
		fetch

.gitignore:	
	Ő maga is jó ha verziókezelt, tegyük be a working directory gyökerébe ha nem jönne létre alapból:
		//touch .gitignore
	A lényeg tehát: Minden ami generált nem kell h verziókezelés alatt álljon mert ebben a fileban fel tudjuk sorolni a kivételeket, mit hagyjon figyelmen kívül a git a working directorynkból.

Ha nem akarjuk leszedni a projekt mappját akkor álljunk bele ahová le sszeretnénk klónozni és a végére tegyünk egy szóközt és egy pontot:
	git clone git@gitbud.epam.com:Gabor_Koncz/mep-linux.git .

git commit -am:
	ha nem akarunk előtte külön git add .-tal hozzáadni mindent akkor egybe vonhatjuk a commit message megadásával.

amend:
	Mivel a commitok nem módosíthatóak (immutable-ök) 	
	git commit --amend	:	az előző commitot tudjuk kvázi módosítani (elvenni/hozzáadni/módosítani filet), valójában: csinál helyettünk a git egy új commitot (elég csak stage-re tenni a változtatásokat) h ne legyen messy a line, a régi lekerül a line-ról. Megnyílik a message editor arra az esetre ha az üzenetet szeretnénk módosítani.
	git commit --amend -m "an updated commit message" : a message editor megnyitása nélkül közvetlenül be tudjuk írni az új commit message-t.	
	git commit --amend	--no-edit :	Ha elfelejtettünk fileokat hozzáadni/módosításítani/törölni az előző commithoz most a commit message megadása nélkül tesszük meg:
		az új fileokat/módosításokat/törléseket tegyük a stage-re és commitoljunk no-edittel. Úgy fog tűnni mintha az új commit lecserélte volna az előzőt úgy h már tartalmazza a hozzáadott fileokat is, mintha eleve ott lettek volna.
	
	hozzá is tudunk adni új file-t amit előzőleg elfelejtettünk a commentben.
	Tegyük fel az új filet- a stage re ( git add <new_File>), majd 
	git commit -- amend
	Ne írjunk bele semmit a párbeszéd ablakba, csak mentsük amikor kilépünk. 
	Így bekerül az utolsó commitunkbe a kifelejtett fileunk, s maga a commit hash is megváltozik.	
		
	Hátrább lévőeket is tudunk módosítani, rá állunk és kiadjuk az amend parancsot, ilyenkor az, amire rááltunk, a mellé fog születni az új commit, és közös lesz az ősünk, az ami az előtt van amire rááltunk.
		Amire rááltunk azt meg fog maradni a time-line ban hisz felfűzhető egy branch-re.

A brench nen más, mint egy pointer ami egy adott kommitra mutat.

Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means 
"I want to include all the work from this parent over here and this one over here, and the set of all their parents."


rebase:
	Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.
	Mivel a commitok immutable-ök ezért megkeressük az utolsó közös őst azzal a branch-csel ahova vissza szeretnénk vezetni a változtatásainkat,
	majd rá másoljuk annak az ágnak a végére a mi águnkat. Az eredetti feature branch megmarad.
	Azon commitok, melyek az eredeti feature branch-en voltak már nem fognak látszódni a master history-jából, de
	ha checkoutolok a feature branch-re annak a historyjában még látszódnak.
	A  fő különbség tehát a merge és a rebase között h a main historyjában látszik mind két ág, a rebase esetén csak a featurében látszódnak az eredeti commitok.
	Rebase esetén ha van konfliktus ugyanúgy fel kell oldani, csak míg merge esetén egyetlen merge commitban történik meg, 
	addig rebase esetén egyesével végig kell menni azon ág commitjain melyhez hozzá szeretnénk fűzni magunkat.
	Természetesen rebase conflict esetén ha masteren már feloldottunk egy konfliktust, akkor a későbbi commitokban már nem kell
	Miután sikerült a rebase utána fel kell tolni a master új állapotát.
	
	A rebas előnye hogy sokkal szebb, lineárisabb lesz a fő ág, nem lesz tele mindenféle elágazásokkal.
	
	git reabase master (//replay your work on top)
		ahol állunk azt beteszi a master után.
	git rebase master topic
		A topicot ráteszei a masterre

		
HEAD: Egy speciális marker(pointer), az a commit amire aktuálisan ki vagyunk checkoutolva. 
	Az a commit ami reprezentálja a working directorynkat.
	Általában az adott branch utolsó commitjára mutat, de lehet manuálisan is mozgatni.
	Ha branch-et váltunk akkor annak utolsó commitjára fogunk mutatni.
	Amikor detach-cseljük a head-et akkor valójában csak annyi történk hogy egy commitra mutatunk, nem pedig egy branch-re.

Commitra annak hash-ével tudunk rámutatni. Nem kell közvetlenül az adott brenchen állni hogy az adott commitra rááljjak, 
egy másik branchről is közvetlenül át lehet ugrani.
Nem kell megadni a teljes hash hosszát, magától tud következtetni.

Relatíve is be lehet járni a hash-fát:
	Fölfelé lépni egyet: ^	//Kettőt: 
	Fölfelé lépni 4-gyel számút: git checkout HEAD~4
	Akutális jelölő: HEAD. Feljebb léni egyet: git checkout HEAD^
	
git branch -f master HEAD~3
	move by force.
	
A brancheket a branch utasítással lehet mozgatni, a HEAD-et a commit-tal.

reset:
	resetelni tudjuk a HEAD-et egy meghatározott commitra, gyakorlatilag vele együtt visszírjuk branch-et ugyanarre a commitra így a mögöttünk lévők a levegőben fognak lógni.
	git reset: HEAD~1
	git reset reverts changes by moving a branch reference backwards in time to an older commit. 
	In this sense you can think of it as "rewriting history;" 
	git reset will move a branch backwards as if the commit had never been made in the first place.
	Valóban kinyírja az aktuális kommitot és visszaáll az egyel előrébb lévőre.
	3 típusa:
		Soft: Visszaállítja a headet a megadott commitra, de a working area-ban meg fog maradni minden változtatás, a staging areat/index sem fogja visszaállítani.
			git reset --soft HEAD^
		Mixed: Ez a default option. Megtartja a working area-t, de kitörli az indexet(nincs feltéve a stage-re)
			git reset --mixed HEAD^
		Hard: Kitölri a staget(indext) és a working area-t is


git revert HEAD
	While reseting works great for local branches on your own machine, 
	its method of "rewriting history" doesn't work for remote branches that others are using.
	In order to reverse changes and share those reversed changes with others, we need to use git revert.
	Előre megy és csinál egy C2' -t
	Ne adjunk ^-t meg ha csak egyet akarunk mozogni, mert akkor kettőt megy "előre", nem az előtte lévőrőre áll vissza, hanem az azt megelőzőre.


Ha a head ugyanitt áll mint a branch akkor lehet felváltva használni? Nem tudom van amikor megy.

cherry pick:
	Ahol állunk, hozzánk fűzi a kiválasztott commito(ka)t és ráállunk a legutolsóra.
	git cherry-pick C2 C4
	ahol álltunk->C2'->C4'(ezen állunk mostmár)
	//A rebase-zel szemben az tehát a különbség h azokra ráálunk, a cherry-pick esetén pedig magunkra húzzuk, s ráállunk. 
	
interactive rebase
	Akkor ha nem pontosan tudjuk mely commitokat akarjuk.

	All interactive rebase means is using the rebase command with the -i option.
	If you include this option, git will open up a UI to show you which commits are about to be copied below the target of the rebase. 
	It also shows their commit hashes and messages, which is great for getting a bearing on what's what.
	For "real" git, the UI window means opening up a file in a text editor like vim.

	When the interactive rebase dialog opens, you have the ability to do 3 things:

	You can reorder commits simply by changing their order in the UI (in our window this means dragging and dropping with the mouse).
	You can choose to completely omit some commits. This is designated by pick -- toggling pick off means you want to drop the commit.
	Lastly, you can squash commits, it allows you to combine commits.
	
	git rebase -i HEAD~4
	A 4-gyel előttünk állóig megnyílik egy párbeszéd, amiben újrarendezhetjük, elvethetjük a rang-en belül történit commitokat,
	ameddig tartott az ablak(~4) onnantól új szál jön létre a kívánt sorrendbe rakott/megtartott commitok másolatával, a régiekről a branch áttevődik az új lánc végére.
	Rmáutathatunk közvetlenül(direkt) az adott végpontra a commit hash-ével is, nem kell realtívka lennie.
		git rebase -i C1
		
squash:
	Ha több commitot egybe szeretnénk gyúrni:
	1: Álljunk vissza arra a legrégebbi commitra amit még szeretnénk h benne legyen (git log --oneline hasznos h lássuk a hash-eket):
		git rebase -i fromHash
	2: a felnyíló párbeszédablakban a pick-kel válasszuk ki mit akarunk megtartani (akár fel is cserélhetjük a sorrendeket.)	
	és ameddig össze akarjuk tömöríteni az elé tegyünk egy s-t, mint squash. Ilynekor a legalsó a legutolsó commit, ez lesz tehát az "-ig".
	3: Mentsünk, Vim-ben a wq-val lépjünk ki.

	
Amíg valamit be nem kommentelek az az összes branchez tartozik, nem csak ahhoz amin állok.

Aliasok file-ba , command line ba kell ""(:git config --global alias.hist "log --oneline --graph --decorate --all") :
	git config --global alias.st status 
	git config --global alias.co checkout 
	git config --global alias.cm commit
	git config --global alias.amend commit --amend 	
	git config --global alias.hist log --oneline --graph --decorate --all
	//Az alias után is tudunk még írni: 
		git hist -- AdottFile
	
		
	global = user lvl, not repo lvl
	
Az aliasokat az adott user alatt lévő .gitconfig file-ba is menthetjük közvetlen:
	[user]
	name = Calindyl
	email = caridniss@gmail.com
	[alias]
		st = status
		co = checkout
		hist = log --oneline --graph --decorate --all
		lol = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
		
	[core]
		autocrlf = true
		
	
Csatlakozás már kész repóbol egy már meglévő távoliba:
	git remote add origin ssh://...
	
remote:
	Remote branch-csel mindent lehet, kivéve commitolni. A push, pull, fetch, merge minden működik.
	Megmutatja h milyen szerverek vannak bállítva elérhetőségnek. Először az aliasok, pl.: origin
	.git/refs/remotes mappában vannak.  //remote-onként vannak a mappák
	Ha kicheckoutolok az origin/master -re, akkor detached állapotba kerül a HEAD, mert nem egy címkére, hanem egy commitra mutat.
	git remote -v
	git config --get remote.origin.url
	vagy:
	git remote show origin
	git bran -r : show remote branches
	
	
Delete/Remove commits:
	git reset --hard HEAD~1
	vagy
	git reset --hard <sha1-commit-id>  //Ami még jó volt
	
	Utána:
	git push origin HEAD --force
	
	
stash:
	Mivel adding nem tudunk átváltani egy másik branch-re amíg van módosulás, ezért vagy commitolni, vagy stashelni kell.
	A stash egy lokális verem amibe be lehet pakolni azokat a változtatásokat(több file is lehet egyszerre) amiket nem szeretnénk az aktuálisan branchünkön látni/át akarjuk lapátolni máshova/később vissza akarjuk hozni.
	A stash levesz mindent a working area-ból(olyan mintha a stage-re tennénk) és egy stash@{id} val megjelölve a "csomagot", beteszi a közös verem tetejére.
	Hasznos lehet ha egy módosítást át akarunk vinni több branch-re is.
	git stash 	: nem kell előtte semmit a stage-re tenni.
	git stash apply : leveszi a legfelsőt bejegyzést a sthashről

		
pull request vs merge request:
	A kettő ugyan az:
		GitLab's "merge request" feature is equivalent to GitHub's "pull request" feature. Both are means of pulling changes from another branch or fork into your branch and merging the changes with your existing code. They are useful tools for code review and change management.

	An article from GitLab discusses the differences in naming the feature:
	Merge or pull requests are created in a git management application and ask an assigned person to merge two branches. Tools such as GitHub and Bitbucket choose the name pull request since the first manual action would be to pull the feature branch. Tools such as GitLab and Gitorious choose the name merge request since that is the final action that is requested of the assignee. In this article we'll refer to them as merge requests.
	A "merge request" should not be confused with the git merge command. Neither should a "pull request" be confused with the git pull command. Both git commands are used behind the scenes in both pull requests and merge requests, but a merge/pull request refers to a much broader topic than just these two commands
	Aki behúzza a requestet, az is felel a kódért nem csak aki fejlesztette.
	
	
fork: 
	Az én repómba lemásolódik egy másik repository. A parancsot kiadom online felületen, utána leklónozom és tudok vele dolgozni.
	Ha létrehozok benne egy commitot és felpusholom akkor kérhetem az én fork repóm branch-ére a pull requestet. 
	A merge most a két repó között fog megtörténni.	

tag:
	A commit history egy meghatározott pontjára ráteszek egy commit címkét (alapból arra amin állunk).
	A későbbi visszatérést segíti. Olyan mint egy horgony, nem mozog, ellentétben a branch-csel.
		Két típusa van:
			Lightweight (git tag [tagname]): Olyan mint egy branch, kvázi egy 40 bájtos azonosító, viszont nem lehet módosítani
			Annotált (git tag -a [tagname] -m [message]): Az object database-ben létrejön egy új object, hasonlüan mint egy commit, tartalmazhat:
				name,
				e-mail,
				date,
				...				
				
	git tag savepoint
	git rebase sevepoint
	Ha checkoutolok egy tag-re akkor detached állapotba kerülünk, kivéve ha épp branch is egyben.
	taget a távoli repóba feltenni sima pusholással lehet:
		git push origin v1.0
	A .git/refs/tag mappában jönnek létre.
	
	
branching model:
		A masterbe nem commitolunk, hanem csak bemergeljük a developot. A masteren tag-elünk.
		Nem közvetlenül a developon, hanem a featuron-ön dolgozunk.
		Release branch
		Hotfix: nem a developon fejlesztem, mert egy adott release verzióhoz tartozik, s majd a developra és a masterre is ki kell tenni.
		

Ancestry reference:
	pl.: git diff HEAD^ Megmutatja h mit változtattunk az előző commit óta	
	Mivel egy commitnak több szülője is lehet (több branchet is egymásba lehet olvasztani egyszerre), ezért horizontálisan azok között a "^"-vel (caret),
	Vertikálisan a "~"-vel (tilede) tudunk magunkhoz viszonyítva közlekedni.
	
housekeeping:
	A git tömörítve tárolja a fileokat, ahol "loose object format"-ban vannak tárolva az objektumok.
	Bizonyos események hatására ezek az objektumok becsomagolásra kerülnek (kevesebb hálózati művelet)
		túl sok loose object, pack, git push esetén pack fileok keletkeznek.
	
	git fsck --unreachable: kilistázza h milyen unreachable objektumaink vannak.
	git prune : kitörli az unreachable objektumokat
	git repack : összecsomagol, compresszál
	git gc: egy csomagolás és egy prune egyben
	
	
	
	
	










	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	