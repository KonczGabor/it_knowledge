http://www.gnu.org/software/bash/manual/bashref.html

Az elsõ két karakternek ennek kell lennie:
#!
utána
/bin/bash

#!/bin/bash
	Azt jelenti h hajtsd végre ezt: /bin/bash thisFile.sh

	szóval a  #! nem csak bash scriptek végrehajtására alkalmas, hanem pl.: Perl, Python, ..

	
Mivel ez futtatható állomány futási jogot kell rá biztosítani 
	chmod u+x
	
	a filenév végén a * (asterisk) azt jelenti h futtatható
	
	ha nincs erre jogunk akkor még megtehetjük így is (csak olvasási jog esetén):
		bash myScript.sh
		
	ha a scriptet tartalmazó mappa nincs a path-ban akkor így kell:
		./myScript.sh
	
bash parancs futtatása:

	$bash myBash.sh
	
az .sh kiterjesztés nem szükséges, de informatív h tudjuk h arról van szó
	
Leírás:

	man bash
	
	
Bash végrehajtása autómatikusan:
	/etc/rc.local -ba beleírjuk az "exit 0" elé pl.
	
List all of the keywords:
		$ enable
		$ compgen -k

		
.bash_profile akkor hívódik meg amikor a Bash mint login shell hívódik meg
a .bashrc pedig minden alkalommal amikor egy új shell elindul


Ha a scripten belül futtatni szeretnénk egy parancsot és annak az értékét hozzá aakrjuk kötni egy változóhoz, akkor az utasítást egyszeres, döntött apsoztrófok közé kell tenni (`) (alt+7).
Nem összetévesztendõ a sima egyszeres apsoztróffal! (') (alt+1).
	x=`pgrep -x java`
	
	
----------------	
if [ -z "$var" ]
then
      echo "\$var is empty"
else
      echo "\$var is NOT empty"
fi	
---------------



$! is the PID of the last backgrounded process.

alias:
	ll="ls-l" #úgy viselkedik mind az ls -la
	
	alias myAlias=eredetiAlias 
 
	alias lekérdezése
		alias ls

	alias felsazabadítása
		unalias ls
		
Find runing Java processes:

	ps aux | grep java
	
Megszámolja valaminek a sorait:

	pl: man bash | wc -l
	
Az értékadás az = vel történik, de nem szabad a két oldalára space-t tenni.
	myVar="this is some chars; -  $\" 

remove a variable:
	unset

Reference to the value of the variable with a dollar sign in front of the name:
	echo myVar is $myVar
	
	
Parancsori argumentumok	
	Egy változó a mash indításakor is értéket kaphat, mint a Java main String[] args-a
		A nulladik maga a file: $0
		Az elsõ a $1
			./myScript elsõParaméter		// echo $1
	
	
Zárójelek közti különbség:
		a=1
		(
		a=2
		)
		echo $a
		#prints 1
	
--------
	
		a=1
		{
		a=2
		}
		echo $a
		#prints 2
		
A bash paranccsal új bash-t idítunk az abban létrehozott változókat nem tudjuk elérni.
Hogy mégis el tudjuk, exportálni kell azokat "globálissá tenni":
a="some stuff"
echo $a
bash
echo $a # print nothing
exit # exit from second bash
export a
bash
echo $a # some stuff
	
----------------
Variables:
		
	-l: toLovercase()
	-u: toUppercas()
	-r: read onyl
	-a: indexed Array
	-A: associative array

----------------
Functions:

function f1 {

}

he felül akarunk írni egy globális változót egy lokálissal akkor azt a fgven belül a typset -tel tethtjük meg.
