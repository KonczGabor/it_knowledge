https://www.tutorialspoint.com/spring/spring_ioc_containers.htm
https://medium.com/omarelgabrys-blog/spring-a-head-start-beans-configuration-part-2-4a8c239b070a

A spring egy framework ami széleskörû infrastruktúrális támogatást biztosít enterprise java alaklamzások fejlesztéséhez.
Lightweight mert a komponenseket külön tudjuk behúzni, csak azt ami nekünk kell.

DTO: egyetlen célja h adatokat vigyen át layerek között.

Aspekt: Közös viselkedést tud biztosítani valamilyen filter mentén.

Egyetlen végrehajtható jar-t készít a dependenciábiból a Spring Boot.

A Bean nem mást mint egy olyan objektum, amit a Spring kezel (annak életciklusát).
A beanek egymson való függõsége egy gráf.  
Nem kötelezõ id-t adni a bean.nek, generálódik magától, csak az számunkra nem lesz elérhetõ. 

Az xml bean definition-nél a ref-fel valódi hivatkozás jön létre (másik bean - CTRL klikk és odaugrik az ide), 
míg valu-val egy String adódik át paraméterként, ami át lesz konvertálva.

A SpringContainer-nek nem egy adatbázisnak kell lennie, amiben felépítünk mindent, és mindent objectet beregisztrálunk.
A Service-ekrõl kell h tudjon, a komponensekrõl kell h tudjon, az adatbázisrétegrõl kell h tudjon, de magáról az adatokról nem kell tudnia.

A Dependency Injection egy megvalósítása az Inversion Of Control-nak.
	A service locator pattern is hasonló.

A DependencyInjection egy design pattern ami megmondja a függõégeink megvalósíthatóságát írja le.
	
IoC lényege h feladjuk a függõségeink fölött az irányítást. Az Inversion Of Control konténer végzi a Dependency Injection-t.

Inkább függjünk a postConstruct()-tól, mint az XML-ben leírt customInit()-tõl, mert deklaratívabb.

A Spring alapból eagerly hozza létre a beaneket.

Poperty Editor: Olyan objectek (iplementációk), amikkel le tudjujk írni h a Stringbõl hogyan készül el a mi saját objektumunk.
A Poperty Editor -t extendálni kell a PopertyEdiorSupport class-t.

A BeanFactory az ApplicationContext õse, a FactoryBean-nel (interfész) kérhetünk új Bean-eket (akkor használatos ha komplex az init logikánk.).
	A FEactoryBean beeaneket gyárt
	
A Bean Factory egy interfész amivel reprezentáljuk a Spring Conténert.

A BeanFactory leszármazottja az Application context.

A factory bean ami bean-eket gyárt.	
	
Autowired típusai:
	no-default
	byName
	byType
	
	Construktor:
		@Autowired
		public MyClass(SpyGirl spicy){
			this.spicy = spicy;
		}	
	
	Setterre is lehet tenni: //Ez a változat könnyebben tesztelhetõ
		@Autowired
		public void setSpicy(SpyGirl spicy){
			this.spicy = spicy;
		}
	
BeanFactoryPostProcessor abban különbözik a Bean PostProcessoroktól:
	Nem beaneket, hanem még elõtte, bean definitionöket kap (a recepteket tudja manipulálni), akkor futnak le amikor még beanünk nincs. 
	A bean life cycle elõtt vegyunk. 
		Ilyen a PopertySourcesPlaceholderConfigurer
	Ezt a BeanFactoryPostProcessort váltjuk ki a ContextNamespace-szel
	
	
Az annotációkat a contextben kell bekapcsolni:
	<context:annotation-config/>
	
	 
	
Java konfigurációt használva:
	Bean nem lehet private. 
	
	
JPA: Java Persistence API: Official API fow rorking with realtional data.
	Just a specification without implementation.
	JPA is a bridge from Java's Object world to how data is stored in relational databases.
	Segytségével függetlenedni tudunk az adatbázisoktól.
	
	javax-is the implementation waht we looking for in the IDEAS multi suggestions.
	
ORM: Object Relational Mapping

Spring Bean Scopes:
	Singleton: 1 példány létezhet csak	(pl.:RestController)  
	Prototype: Mindig új példány keletkezik
	Request: Request-enként új pédány keletkezik 
	Session: Session-önként új példány keletkezik (Feilsmer egy embert én nem fog minden requestenként újat visszaadni, bevásárló kocsi esetén használjuk)  @Scope("session")
	GloblaSession: (Portleteknél)
	
application.properties:
	A java kód kapcsolata a külvilággal
	A kód újra fordítása nélkül tudjuk változtatni(dinamikusan) az értékeket. A Hardcode ellentéte.
	
	Paraméter priority (Felül az erõsek, alul a gyengék):
		Terminal paraméterek
		JNDI attribútumok(java:comp/env)
		Java System properties(System.getProperties())
		OS környezeti változók
		Profil alapú konfiguráció
		Application.poperties(.jar file mellett)
		Application.poperties(.jar file belsejében)
		
	//ConfigurationProperties:(?)	https://www.youtube.com/watch?v=dA_2QUiWVOQ&list=PLyriihBWoulywcSbZijjeSIHH19uJZG5q&index=12
	//@EnableConfigurationProperties:(?)
		
	
	
	
	
	
 