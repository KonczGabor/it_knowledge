https://www.tutorialspoint.com/spring/spring_ioc_containers.htm
Getting Started is easy
Convention Over Configuration
Spring CLI (Command Line Tool)	Groovy Sintax = similar like java
Has an Entry Point Static Void Main
Starter POMs
Production Ready features : monitor
Run anywhere = executable jars.

devtools:
	spring-boot-devtools (1.3+)(minden class pathon lévő file változása autómatikusan triggereli az alakalmazás újraindítását)
	thymeleatf - tempaltes
	Automatic restart
		Spring Loadaed, J Rebel
	Live reload 
	Remote Debug Tunneling
	Szerencsére érzékeli h IDE-ben van és éles szerveren(prod environment) nem indítja újra magát (?)
	
	IJ:
		Help
			Find Action
				Registry
					compiler.automake.allow.when.app.running
						Pipát be
						
		File
			Settings
				Build,Executiopn,Deployment
					Compiler
						Build/Make project automatically
							Pipa
							
		pom.xml
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
			</dependency>
			
		Kell még egy chrome bővítmény (aktívak kell lennie):
			http://livereload.com/extensions/
				Chrome extension on the Chrome Web Store
					
					
Dependency Inversion:
	Bean Configuretion:
		XML
		Annotations
		Java Bean Configuration
		Groovy Beam Configuration
		
	Bean Scope
		Singleton (default)
		Prototype (Mindne kérésnél új példány jön létre)
		Request	(Web context, minden http request-nél)
		Session	(Minden őj Session-nél jön létre, userenként)
		globalSession
		
		
	Property based Injection:
		@Autowired
		private NotificationService notificationService;
		
	Setter Based Injection:
		private NotificationService notificationService;	
	
		@Autowired
		public void setNotificationService(NotificationService notificationService){
			this.notificationService = notificationService
		}
		
	Constructor Based Injection
		public class PageController {
			private NotificationService notificationService;	
		
			@Autowired
			public PageController(NotificationService notificationService){
				this.notificationService = notificationService;
			}
		}
		
	@SpringBootApplication egy összefoglaló, ami ezeket tartalmazza magában:  //Az annotációkat egybeírjuk CamelCase-zel, az első is nagy.
		@Configuration: A megszólítja a konténert hogy ez az osztály lesz az információk forrása.
		@EnableAutoConfiguration
		@ComponentScan({"külső.pakcage1",külső.package2}): Megszólítja a konténert hogy abban a package-ben amelyikben ez az annotáció van(és subpackage-ek(Ezért érdmes legfelülre tenni)) abban nézze végig az összes osztályt és amelyik felett @Component típus van azt regisztrálja be aa konténer magának.
		
	Ahhoz h valamit be tudjunk húzni @Autowired-del, ahhoz Bean-nek kell lennie.
		
	Mik lehetnek Beanek?
		@Bean
		@Contoller("itt megadhatjuk a nevét")
		@RestController		//Bármit visszadhat (xml, json, html)
		@Service
		@Component
		@Repository
		
		
	Ahhoz hogy végigpásztázzuj a Beaneinket, a Component annotációt be kell konfigurálni az adott helyekre:
		@ComponentScan({"com.abc.foo","com.valami"})
		
	Create ApplicationContext:
		ApplicationContext ctx = SpringApplication.run(SpringApplication.class, args);
		
	Get a Bean from ApplicationContext:
		ctx.getBean("benaName");
	
Externalized Configuration
	Annotation poperties:
		Ez egy key-value config file.
			Van köztük preferencia sorrend:
				1, Az adott folder /config subdirectory-ja
				2, Az adott directory
				3, Classpath /config package
				4, Classpath 
				
	A -properties fileok magasabb referenciát élveznek, mint a .yml-ek

	
What is YAML? 
	Superset of JSon
	A human-readable data serialization language
	It is commonly used for configuration files, but could be used in many applications where data is being stored, or transmitted.
	A kiterjesztése: yml	
	
A .poprties fileokban hivatkozhatunk más property-kre egy adott porperty-ben:
	app.name=myCoolAppname
	app.description:${app-name} is a Spring Boot Application

@Value annotációval elérhetjük közvetlenül az attribútumok értékeit. Azokat az attribútumokéit, amiket a Controller lát, nem kell a modellben lenniük.
	@Value("${attribútum}")
	

Anemic domain model POJO-ját fel lehet tölteni @ConfigurationProperties(prefix="myConfig") annotációval
	Hogy ezt a feature-t használni tudjuk:
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optioanl>true</optioanl>
		</dependency>

		application.yml		
			myConfig:
				app-name: dsadsa			//Nem muszáj camelCase-nek lenni, ki tudja sakkozni.
				addDescription: sddsa
				adminFirstName: dasdas
				adminLastName: dsdas

application.properties file-t autómatikusan felolvassa az alkalmazás				
	Melyik porton fusson az alkalmazás, mekkora legyen a heap.

Struktúra:				
	View: HTML5+CSS+JS
	@RestController: bármit vissza ad /@Controller : alapból nézetet keres 
	Controller: csak forgalomirényító
	@Service
	Service: Kollekciók, business logic
	Model: Adattárolási feladatok
	Repository: Kommunikál az adatbázissal Entities

Ha be akarunk húzni egy POJO-t a konténerbe, ami nincs ellátva annotációval és továbbra sem akarjuk akkor egy olyan osztályban, ami bír @Configuration-nel (@SpringBootApplication ugye alapból tartalmazza):
	akkor csináljunk egy fgv-t ami vissza ad egy beant:
		@Bean
		public Person giveMeAPerson(){
			return new Person("Gyula, 20");	//Ilyenkor a bean neve giveMeAPerson lesz.
		}



















		
				