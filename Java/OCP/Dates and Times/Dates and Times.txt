import java.time.*;

The date and time classes are immutable, which means that the return value must be used or the operation will be ignored.
All classess in java.time package such as classes for date, time, date and time combined, time zones, instants, duration, and clocks are immutable and thread-safe.

March 13. 1:59 -> 3:00

November 6. 1:59 -> 1:00

System.out.println(LocalDate.now());
System.out.println(LocalTime.now());
System.out.println(LocalDateTime.now());
System.out.println(ZonedDateTime.now());
--------------------


ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime zoned1 = ZonedDateTime.of(2015, 1, 20,
6, 15, 30, 200, zone);

ZonedDateTime zoned2 = ZonedDateTime.of(date1, time1, zone);
ZonedDateTime zoned3 = ZonedDateTime.of(dateTime1, zone);

Notice that there isn’t an option to pass in the Month enum. This seems like an oversight
from the API creators and something that will be fixed in future versions of Java.
---------------------



System.out.println(dateTime); // 2020–01–18T19:15
dateTime = dateTime.minusSeconds(30);
System.out.println(dateTime); // 2020–01–18T19:14:30                 //Eddig nem volt seconds, mostmár az is van!
---------------------



private static void performAnimalEnrichment(LocalDate start, LocalDate end) {
	LocalDate upTo = start;
	while (upTo.isBefore(end)) { 				// check if still before end
		System.out.println("give new toy: " + upTo);
		upTo = upTo.plusMonths(1); 			// add a month
	} 
}
---------------------



Period annually = Period.ofYears(1); 			// every 1 year
Period quarterly = Period.ofMonths(3);			// every 3 months
Period everyThreeWeeks = Period.ofWeeks(3); 	// every 3 weeks
Period everyOtherDay = Period.ofDays(2); 		// every 2 days
Period everyYearAndAWeek = Period.of(1, 0, 7); 	// every year and 7 days
----------------------

System.out.println(Period.ofWeeks(3));
This one outputs P21D. Remember that week is not one of the units a Period stores.
----------------------


Duration daily = Duration.ofDays(1); // PT24H
Duration hourly = Duration.ofHours(1); // PT1H

Duration, you can specify the number of days, hours, minutes, seconds, or nanoseconds. And yes, you could pass 365
days to make a year, but you really shouldn’t—that’s what Period is for.
----------------------


System.out.println(ChronoUnit.HOURS.between(one, two)); // 1 Truncates rather than rounds.
----

LocalDate date = LocalDate.of(2015, 5, 25);
Period period = Period.ofDays(1);
Duration days = Duration.ofDays(1);

System.out.println(date.plus(period)); // 2015–05–26
System.out.println(date.plus(days)); // Unsupported unit: Seconds
----------------------


			Can Use with Period? 	Can Use with Duration?

LocalDate 				Yes 			No
LocalDateTime 			Yes 			Yes
LocalTime 				No	 			Yes
ZonedDateTime 			Yes 			Yes
-----------------------

Formatting:

Egyik típus:

	Elõször a formattert hozzuk létre:

		DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);

	Majd a formatteren hívjuk meg a fomat parancsot, amelynek paraméterébe adjuk át a kívánt változót.
	A formatternek van egy típusa, ha a paraméterbe nem megfelelõ változó kerül akkor excp. Date formatter mûködik DateTime-mal, Date-tel, de csak Time-mal nem.
-----------------

Másik típus:

LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
LocalTime time = LocalTime.of(11, 12, 34);
LocalDateTime dateTime = LocalDateTime.of(date, time);
System.out.println(date.format(DateTimeFormatter.ISO_LOCAL_DATE));
System.out.println(time.format(DateTimeFormatter.ISO_LOCAL_TIME));
System.out.println(dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

Itt magán a változón hívjuk meg a format-ot.

------------------


Ha egy var dateTime és rajta time formatot hívunk meg akkor csak a time-ot írja ki
-------------------

LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);
Period p = Period.ofDays(1).ofYears(2);
d = d.minus(p);
DateTimeFormatter f = DateTimeFormatter.
ofLocalizedDateTime(FormatStyle.SHORT);
System.out.println(f.format(d));

Period does not allow chaining. Only the last Period method called counts, so only the two years are subtracted.
----------------------


System.out.println(shortF.format(dateTime)); 	// 1/20/20 11:12 AM
System.out.println(mediumF.format(dateTime)); 	// Jan 20, 2020 11:12:34 AM
----------------------


Without a time zone, Java doesn’t know what moment in time to use for the Instant.
----------------------


Local______ explicitly excludes time zones. Instant represents a point in time, but always uses GMT rather than the desired time zone.
---------------------



Period.between(most-késõbbi): negeatívot fog létrehozni.
---------------------


LocalDate date = LocalDate.of(2016, Month.MARCH, 13);
LocalTime time = LocalTime.of(1, 30);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime dateTime = ZonedDateTime.of(date, time, zone);
System.out.println(dateTime); // 2016–03–13T01:30–05:00[US/Eastern]
dateTime = dateTime.plusHours(1);
System.out.println(dateTime); // 2016–03–13T03:30–04:00[US/Eastern]			//Nem csak az óra, a GMT is megváltozott!!! Muszáj h lecsökkenjen, mert kifizette az egy órát.
---------------------

Ha olyan idõt adunk meg ami nem létezik, mert pont a gap-ban van, akkor elõre lép:

LocalDate date = LocalDate.of(2016, Month.MARCH, 13);
LocalTime time = LocalTime.of(2, 30);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime dateTime = ZonedDateTime.of(date, time, zone);
System.out.println(dateTime); // 2016–03–13T03:30–04:00[US/Eastern]

Nincs 2:30, helette 3:30 lesz.
---------------------

dateTimeFormatter: (minden Locale)
											Amit neki átadok:
											date				dateTime					Time
Amilyen ítpusú formattert hozok létre:

date										OK					csak a date-et írja ki		elszarja magát

dateTime									elszarja magát		OK							elszarja magát

time										elszarja magát		csak az idõt írja ki		OK

Konklúzió: Az objektum akarja a jót, amit tud megmutat magából, a formatter feszül, elszarja magát ha nem kapja meg ami neki jár.
---------------------


System.out.println(shortF.format(dateTime)); // 1/20/20 11:12 AM
System.out.println(mediumF.format(dateTime)); // Jan 20, 2020 11:12:34 AM





















