Design pattern: Általánosanan elfogadott megoldás egy gyakran elõforduló szoftverfejlesztési problémára.

Elõnyei:
	Logikusabb kódfelépítés.
	Egyszerûbbé válik a kód megértése.
	Könnyebbé válik ak rbantarthatósága és könnyebben tud alkalmazkodni az igények változásaihoz.
	

Singleton:

Az osztálnyak csak egy példánya létezhet a memóriában. Ezen osztozik a többi osztály és szál.
Hasznos, mert növeli a teljesítményt azáltal hogy újrafelhasználható adatot tart közelségben és azt nem kell minden esetben külön tárolni, majd visszatölteni.

Általában public static getInstance() -szal érjük el, ami vissza ad egy private static final instance referenciát.

A többi metódus megkapja a synchronized-ot is nem csak a public-ot.

Privát konstruktora miatt nem lehet csak közvetlenül példányosítani, ezért öröklési szempontból az osztály effecively final-nak számít.

Lazy instantiation: Amikor újrafelhasználható objektumot elõször hozunk létre általában az igény fellépésekor, nem pedig annak osztályának betöltõdésekor.
Elsõ használatkor érezhetõ késedelem figyelhetõ meg a programban. Alapból nem thread safe. 
Az osztály betöltõdésekor való statikus inicializáló blokkban történõ példányosítás viszont igen.
