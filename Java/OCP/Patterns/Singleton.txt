Singleton:

Az osztálnyak csak egy példánya létezhet a memóriában. Ezen osztozik a többi osztály és szál.
Hasznos, mert növeli a teljesítményt azáltal hogy újrafelhasználható adatot tart közelségben és azt nem kell minden esetben külön tárolni, majd visszatölteni.
Általában közös elérésü erõforrások menedzselésére használják. (pl.: file mûveletek)

A konstruktor privát 

Általában public static getInstance() -szal érjük el, ami vissza ad egy private static final instace referenciát.

A többi metódus megkapja a synchronized-ot is nem csak a public-ot.

Magának az objektumnak nem kell readonlynak lennie

Többféleképpen is meg lehet valósítani a Singleton Pattern-t, ilyen például hogy ha a statikus inicializáló blokkban jön létre az instance. 
Ez a módszer ugyanolyan értékü, viszont lehetõség van rá hogy a statikus blokkban további utasítások futhassanak le.

Harmadik módszer a Lazy Instatntiation:
Nem final az instance, helyette az azt visszaadó getInstance() lesz synchronized.
Ilyenkor nem jön létre példány egész addig, amíg konkrétan el nem akarjuk azt kérni (getInstance() method is called).
Ez a módszer nem szálbiztos, viszont növeli az alkalmazás betöltõdési sebességét. Az elsõ használatkor "megdöccen" a program.